
// Auto-generated by storybook-visual-regression
import { test, expect } from '@playwright/test';
import path from 'path';

async function waitForStorybookIndex(baseURL, timeout = 30000) {
  const startTime = Date.now();
  
  while (Date.now() - startTime < timeout) {
    try {
      const url = baseURL + '/index.json';
      const res = await fetch(url);
      
      if (res.ok) {
        const contentType = res.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
          const data = await res.json();
          return data;
        }
      }
    } catch (error) {
      // Continue waiting
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  throw new Error('Storybook index.json not available after timeout');
}

async function getStories(baseURL) {
  const data = await waitForStorybookIndex(baseURL);
  const entries = data.entries || {};
  return Object.values(entries).filter(e => e && e.type === 'story');
}

test.describe('Storybook Visual Regression Tests', () => {
  test('visual regression for all stories', async ({ page, baseURL }) => {
    console.log('Waiting for Storybook to be ready...');
    const stories = await getStories(baseURL);
    console.log(`Found ${stories.length} stories to test`);
    
    for (const entry of stories) {
      console.log(`Testing story: ${entry.title} - ${entry.name}`);
      
      // Navigate to the story
      await page.goto(baseURL + '/iframe.html?id=' + entry.id);
      await page.waitForLoadState('networkidle');
      
      // Wait a bit for any animations to settle
      await page.waitForTimeout(1000);
      
      // Take screenshot
      const screenshotPath = path.join('visual-regression-snapshots', `${entry.id}.png`);
      await page.screenshot({ 
        path: screenshotPath,
        fullPage: true 
      });
      
      console.log(`✓ Screenshot saved: ${screenshotPath}`);
    }
    
    console.log(`✓ Completed visual regression tests for ${stories.length} stories`);
  });
});
